name: New RFC Auto Setup

on:
  repository_dispatch:
    types: [new-rfc-ready]

jobs:
  create-rfc:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Install yq
        run: sudo apt-get update && sudo apt-get install -y yq jq

      - name: Extract issue fields
        id: fields
        run: |
          TITLE=$(echo "${{ github.event.client_payload.issue.title }}" | sed 's/RFC Proposal: //')
          AUTHOR=$(echo '${{ github.event.client_payload.issue.user.login }}')
          DATE=$(date +%F)
          LABELS="${{ github.event.client_payload.labels }}"

          echo "title=$TITLE" >> $GITHUB_OUTPUT
          echo "author=$AUTHOR" >> $GITHUB_OUTPUT
          echo "date=$DATE" >> $GITHUB_OUTPUT
          echo "labels=$LABELS" >> $GITHUB_OUTPUT

      - name: Generate RFC ID
        id: id
        run: |
          LAST=$(ls rfcs/RFC-* -1d 2>/dev/null | wc -l)
          NEXT=$((LAST+1))
          ID="RFC-$(printf "%03d" $NEXT)"
          echo "id=$ID" >> $GITHUB_OUTPUT

      - name: Create RFC skeleton
        run: |
          ID=${{ steps.id.outputs.id }}
          TITLE=${{ steps.fields.outputs.title }}
          AUTHOR=${{ steps.fields.outputs.author }}
          DATE=${{ steps.fields.outputs.date }}
          LABELS="${{ steps.fields.outputs.labels }}"

          DIR="rfcs/$ID-${TITLE// /-}"
          mkdir -p "$DIR/diagrams" "$DIR/design" "$DIR/notes"

cat > "$DIR/$ID-${TITLE// /-}.md" <<EOF
# $ID: $TITLE

## üìå Metadata
- **RFC ID**: $ID
- **Title**: $TITLE
- **Author(s)**: $AUTHOR
- **Created Date**: $DATE
- **Status**: Draft
- **Version**: v1.0
- **Squads**: ${LABELS:-TBD}

---
## 1. Motivation
(TODO)
...
EOF

          echo "# High-Level Design (HLD)" > "$DIR/design/HLD.md"
          echo "# Low-Level Design (LLD)" > "$DIR/design/LLD.md"
          echo "# Deployment / Rollout Strategy" > "$DIR/design/Deployment.md"
          echo "# Diagrams for $ID" > "$DIR/diagrams/README.md"
          echo "# Meeting Notes for $ID" > "$DIR/notes/meeting-notes.md"
          echo "# Decisions Log for $ID" > "$DIR/notes/decisions-log.md"

      - name: Push branch
        run: |
          ID=${{ steps.id.outputs.id }}
          TITLE=${{ steps.fields.outputs.title }}
          BRANCH="rfc/${ID}-${TITLE// /-}"
          git checkout -b "$BRANCH"
          git add rfcs/
          git commit -m "chore: add skeleton for $ID"
          git push origin "$BRANCH"

      - name: Collect reviewers from squads
        id: reviewers
        run: |
          REVIEWERS=""
          CHECKLIST=""
          for label in ${{ steps.fields.outputs.labels }}; do
            squad=$(echo $label | cut -d'/' -f2)
            r=$(yq ".${squad}.reviewers[]" .github/squad-reviewers.yml | xargs || true)
            REVIEWERS="$REVIEWERS $r"
            CHECKLIST="$CHECKLIST\n- [ ] ${squad^} review"
          done
          echo "reviewers=$REVIEWERS" >> $GITHUB_OUTPUT
          echo "checklist=$CHECKLIST" >> $GITHUB_OUTPUT

      - name: Create draft PR
        uses: peter-evans/create-pull-request@v6
        with:
          title: "${{ steps.id.outputs.id }}: ${{ steps.fields.outputs.title }}"
          branch: "rfc/${{ steps.id.outputs.id }}-${{ steps.fields.outputs.title// /- }}"
          draft: true
          labels: |
            rfc
            proposal
            ${{ steps.fields.outputs.labels }}
          reviewers: ${{ steps.reviewers.outputs.reviewers }}
          body: |
            Auto-generated RFC skeleton from [issue #${{ github.event.client_payload.issue.number }}](${{ github.event.client_payload.issue.html_url }})

            **Author**: @${{ steps.fields.outputs.author }}  
            **Squads**: ${{ steps.fields.outputs.labels }}  
            **Status**: Draft  

            ---
            ## ‚úÖ Review Checklist
            ${{ steps.reviewers.outputs.checklist }}
            
      - name: Comment on original issue with PR link
        if: success()
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          ISSUE_NUM=${{ github.event.client_payload.issue.number }}
          PR_URL=$(gh pr list --head "rfc/${{ steps.id.outputs.id }}-${{ steps.fields.outputs.title// /- }}" --json url -q '.[0].url')

          if [ -n "$PR_URL" ]; then
            gh issue comment $ISSUE_NUM --body "üìå RFC skeleton has been generated: [$PR_URL]($PR_URL)"
          else
            echo "‚ö†Ô∏è Could not find PR URL"
          fi