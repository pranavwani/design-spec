name: Publish RFCs to GitHub Pages

on:
  workflow_run:
    workflows: ["RFC Index Generator"]   # ← chain only from index
    types: [completed]
  workflow_dispatch: {}

permissions:
  contents: read
  pages: write
  id-token: write

concurrency:
  group: rfc-pages
  cancel-in-progress: true
  
jobs:
  build:
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    runs-on: ubuntu-latest
    outputs:
      has_any: ${{ steps.check.outputs.has_any }}
    steps:
      - uses: actions/checkout@v4

      - name: Check if there is anything to publish
        id: check
        shell: bash
        run: |
          set -euo pipefail
          # Count safely; never fail if folders are missing
          count() { test -d "$1" || mkdir -p "$1"; find "$1" -type f -name '*.md' 2>/dev/null | wc -l | awk '{print $1}'; }
          DRAFTS=$(count rfcs)
          ACCEPTED=$(count specs)
          REJECTED=$(count rejected)
          HAS_ANY=false
          if [ "$DRAFTS" != "0" ] || [ "$ACCEPTED" != "0" ] || [ "$REJECTED" != "0" ]; then HAS_ANY=true; fi
          echo "has_any=$HAS_ANY" >> "$GITHUB_OUTPUT"

      - name: Setup Python
        if: steps.check.outputs.has_any == 'true'
        uses: actions/setup-python@v5
        with:
          python-version: "3.x"

      - name: Install MkDocs
        if: steps.check.outputs.has_any == 'true'
        run: pip install mkdocs mkdocs-material

      # Stage markdown into ./docs so mkdocs isn't confused by root-as-docs
      - name: Stage docs into ./docs
        if: steps.check.outputs.has_any == 'true'
        shell: bash
        run: |
          set -euo pipefail
          rm -rf docs
          mkdir -p docs
          [ -f RFC_INDEX.md ] && cp RFC_INDEX.md docs/RFC_INDEX.md
          [ -d rfcs ] && rsync -a rfcs/ docs/rfcs/ || true
          [ -d specs ] && rsync -a specs/ docs/specs/ || true
          [ -d rejected ] && rsync -a rejected/ docs/rejected/ || true

      # Generate mkdocs.yml with correct docs_dir and auto-nav relative to ./docs
      - name: Generate mkdocs.yml (auto-nav under ./docs)
        if: steps.check.outputs.has_any == 'true'
        shell: bash
        run: |
          set -euo pipefail
          list_md () { find "$1" -type f -name '*.md' -print0 2>/dev/null | sort -z; }
          has_any_dir () { test -d "$1" && [ "$(find "$1" -type f -name '*.md' 2>/dev/null | wc -l)" -gt 0 ]; }

          # Base config
          cat > mkdocs.yml <<'YAML'
          site_name: RFCs
          docs_dir: docs
          theme:
            name: material
          plugins:
            - search
          markdown_extensions:
            - toc:
                permalink: true
            - tables
            - admonition
            - codehilite
          nav:
            - Home: RFC_INDEX.md
          YAML

          # Helper to append a section
          append_section () {
            local title="$1"; shift
            local root="$1"; shift
            echo "  - ${title}:" >> mkdocs.yml
            # Pretty names from parent folder, link file with path relative to docs/
            while IFS= read -r -d '' f; do
              rel="${f#docs/}"                               # e.g. specs/0001-foo/rfc.md
              name="$(basename "$(dirname "$rel")")"        # e.g. 0001-foo
              printf "      - %s: %s\n" "$name" "$rel" >> mkdocs.yml
            done < <(list_md "$root")
          }

          # Add sections only if they have content
          has_any_dir docs/rfcs     && append_section "Drafts"   "docs/rfcs"
          has_any_dir docs/specs    && append_section "Accepted" "docs/specs"
          has_any_dir docs/rejected && append_section "Rejected" "docs/rejected"

      - name: Build site
        if: steps.check.outputs.has_any == 'true'
        run: mkdocs build --clean

      - name: Upload artifact
        if: steps.check.outputs.has_any == 'true'
        uses: actions/upload-pages-artifact@v3
        with:
          path: site

  deploy:
    runs-on: ubuntu-latest
    needs: build
    if: needs.build.outputs.has_any == 'true'
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
