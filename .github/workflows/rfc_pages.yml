name: Publish RFCs to GitHub Pages

on:
  workflow_run:
    workflows: ["RFC Index Generator"]   # runs after index completes
    types: [completed]
  workflow_dispatch: {}

permissions:
  contents: read
  pages: write
  id-token: write

# ensure only one publish runs at a time
concurrency:
  group: rfc-pages
  cancel-in-progress: true

jobs:
  build:
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    runs-on: ubuntu-latest
    outputs:
      has_any: ${{ steps.check.outputs.has_any }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Check if there is anything to publish
        id: check
        shell: bash
        run: |
          set -euo pipefail
          count() { test -d "$1" || mkdir -p "$1"; find "$1" -type f -name '*.md' 2>/dev/null | wc -l | awk '{print $1}'; }
          DRAFTS=$(count rfcs)
          ACCEPTED=$(count specs)
          REJECTED=$(count rejected)
          HAS_ANY=false
          if [ "$DRAFTS" != "0" ] || [ "$ACCEPTED" != "0" ] || [ "$REJECTED" != "0" ]; then HAS_ANY=true; fi
          echo "has_any=$HAS_ANY" >> "$GITHUB_OUTPUT"

      - name: Setup Python
        if: steps.check.outputs.has_any == 'true'
        uses: actions/setup-python@v5
        with:
          python-version: "3.x"

      - name: Install MkDocs
        if: steps.check.outputs.has_any == 'true'
        run: pip install mkdocs mkdocs-material

      - name: Stage docs into ./docs
        if: steps.check.outputs.has_any == 'true'
        shell: bash
        run: |
          set -euo pipefail
          rm -rf docs
          mkdir -p docs
          [ -f RFC_INDEX.md ] && cp RFC_INDEX.md docs/RFC_INDEX.md
          [ -d rfcs ] && rsync -a rfcs/ docs/rfcs/ || true
          [ -d specs ] && rsync -a specs/ docs/specs/ || true
          [ -d rejected ] && rsync -a rejected/ docs/rejected/ || true

      - name: Generate mkdocs.yml (safe, array-based)
        if: steps.check.outputs.has_any == 'true'
        shell: bash
        run: |
          set -euo pipefail

          collect_md() {
            local root="$1" ; shift
            local -n out_arr=$1
            out_arr=()
            if [ -d "$root" ]; then
              while IFS= read -r -d '' f; do
                out_arr+=( "${f#docs/}" )
              done < <(find "$root" -type f -name '*.md' -print0 2>/dev/null || true)
            fi
          }

          declare -a DRAFTS SPECED REJECTED
          collect_md "docs/rfcs" DRAFTS
          collect_md "docs/specs" SPECED
          collect_md "docs/rejected" REJECTED

          cat > mkdocs.yml <<'YAML'
          site_name: RFCs
          site_url: https://pranavwani.github.io/design-spec/
          docs_dir: docs
          theme:
            name: material
          plugins:
            - search
          markdown_extensions:
            - toc:
                permalink: true
            - tables
            - admonition
            - codehilite
          nav:
            - Home: RFC_INDEX.md
          YAML

          if [ "${#DRAFTS[@]}" -gt 0 ]; then
            echo "  - Drafts:" >> mkdocs.yml
            for rel in "${DRAFTS[@]}"; do
              name="$(basename "$(dirname "$rel")")"
              printf "      - %s: %s\n" "$name" "$rel" >> mkdocs.yml
            done
          fi

          if [ "${#SPECED[@]}" -gt 0 ]; then
            echo "  - Accepted:" >> mkdocs.yml
            for rel in "${SPECED[@]}"; do
              name="$(basename "$(dirname "$rel")")"
              printf "      - %s: %s\n" "$name" "$rel" >> mkdocs.yml
            done
          fi

          if [ "${#REJECTED[@]}" -gt 0 ]; then
            echo "  - Rejected:" >> mkdocs.yml
            for rel in "${REJECTED[@]}"; do
              name="$(basename "$(dirname "$rel")")"
              printf "      - %s: %s\n" "$name" "$rel" >> mkdocs.yml
            done
          fi

      - name: Build site
        if: steps.check.outputs.has_any == 'true'
        run: mkdocs build --clean

      - name: Upload artifact
        if: steps.check.outputs.has_any == 'true'
        uses: actions/upload-pages-artifact@v3
        with:
          path: site

  deploy:
    runs-on: ubuntu-latest
    needs: build
    if: needs.build.outputs.has_any == 'true'
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
