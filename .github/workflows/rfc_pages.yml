name: Publish RFCs to GitHub Pages

on:
  workflow_run:
    workflows: ["RFC Index Generator"]   # ← chain only from index
    types: [completed]
  workflow_dispatch: {}

permissions:
  contents: read
  pages: write
  id-token: write

jobs:
  build:
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    runs-on: ubuntu-latest
    outputs:
      has_any: ${{ steps.check.outputs.has_any }}
    steps:
      - uses: actions/checkout@v4

      - name: Check if there is anything to publish
        id: check
        shell: bash
        run: |
          set -euo pipefail
          # Count safely; never fail if folders are missing
          count() { test -d "$1" || mkdir -p "$1"; find "$1" -type f -name '*.md' 2>/dev/null | wc -l | awk '{print $1}'; }
          DRAFTS=$(count rfcs)
          ACCEPTED=$(count specs)
          REJECTED=$(count rejected)
          HAS_ANY=false
          if [ "$DRAFTS" != "0" ] || [ "$ACCEPTED" != "0" ] || [ "$REJECTED" != "0" ]; then HAS_ANY=true; fi
          echo "has_any=$HAS_ANY" >> "$GITHUB_OUTPUT"

      - name: Setup Python
        if: steps.check.outputs.has_any == 'true'
        uses: actions/setup-python@v5
        with:
          python-version: "3.x"

      - name: Install MkDocs
        if: steps.check.outputs.has_any == 'true'
        run: pip install mkdocs mkdocs-material

      - name: Generate mkdocs.yml (only include non-empty sections)
        if: steps.check.outputs.has_any == 'true'
        shell: bash
        run: |
          set -euo pipefail
          list_md () { find "$1" -type f -name '*.md' -print0 2>/dev/null | sort -z; }
          has_any_dir () { test "$(find "$1" -type f -name '*.md' 2>/dev/null | wc -l | awk '{print $1}')" != "0"; }

          echo "site_name: RFCs" > mkdocs.yml
          echo "docs_dir: ." >> mkdocs.yml
          echo "theme:" >> mkdocs.yml
          echo "  name: material" >> mkdocs.yml
          echo "plugins:" >> mkdocs.yml
          echo "  - search" >> mkdocs.yml
          echo "markdown_extensions:" >> mkdocs.yml
          echo "  - toc:" >> mkdocs.yml
          echo "      permalink: true" >> mkdocs.yml
          echo "  - tables" >> mkdocs.yml
          echo "  - admonition" >> mkdocs.yml
          echo "  - codehilite" >> mkdocs.yml
          echo "nav:" >> mkdocs.yml
          echo "  - Home: RFC_INDEX.md" >> mkdocs.yml

          if has_any_dir rfcs; then
            printf "  - Drafts:\n" >> mkdocs.yml
            while IFS= read -r -d '' f; do
              rel="${f#./}"
              printf "      - %s: %s\n" "$(basename "$(dirname "$rel")")" "$rel" >> mkdocs.yml
            done < <(list_md rfcs)
          fi

          if has_any_dir specs; then
            printf "  - Accepted:\n" >> mkdocs.yml
            while IFS= read -r -d '' f; do
              rel="${f#./}"
              printf "      - %s: %s\n" "$(basename "$(dirname "$rel")")" "$rel" >> mkdocs.yml
            done < <(list_md specs)
          fi

          if has_any_dir rejected; then
            printf "  - Rejected:\n" >> mkdocs.yml
            while IFS= read -r -d '' f; do
              rel="${f#./}"
              printf "      - %s: %s\n" "$(basename "$(dirname "$rel")")" "$rel" >> mkdocs.yml
            done < <(list_md rejected)
          fi

      - name: Build site
        if: steps.check.outputs.has_any == 'true'
        run: mkdocs build --clean

      - name: Upload artifact
        if: steps.check.outputs.has_any == 'true'
        uses: actions/upload-pages-artifact@v3
        with:
          path: site

  deploy:
    runs-on: ubuntu-latest
    needs: build
    if: needs.build.outputs.has_any == 'true'
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
