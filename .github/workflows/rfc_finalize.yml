name: RFC Finalize

on:
  pull_request:
    types: [closed]

permissions:
  contents: write
  pull-requests: write
  issues: write

jobs:
  finalize:
    if: startsWith(github.event.pull_request.head.ref, 'rfc/')
    runs-on: ubuntu-latest
    steps:
      - name: Checkout merge commit (or base branch)
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: ${{ github.event.pull_request.merged && github.event.pull_request.merge_commit_sha || github.event.pull_request.base.ref }}

      - name: Configure Git
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

      - name: Ensure RFC root folders exist
        shell: bash
        run: |
          set -euo pipefail
          mkdir -p rfcs specs rejected
          for d in rfcs specs rejected; do
            touch "$d/.gitkeep"
          done

      - name: Resolve RFC folder robustly
        id: rfc
        shell: bash
        run: |
          set -euo pipefail
          HEAD_REF="${{ github.event.pull_request.head.ref }}"   # e.g. rfc/0003-sqlite-support-summary
          SLUG="${HEAD_REF#rfc/}"                                # 0003-sqlite-support-summary
          ID="${SLUG%%-*}"                                       # 0003

          # Try exact slug
          SRC="rfcs/${SLUG}"
          if [ ! -d "$SRC" ]; then
            # Try by numeric id (slug may have changed)
            SRC="$(find rfcs -maxdepth 1 -mindepth 1 -type d -name "${ID}-*" | head -n1 || true)"
          fi

          # Fallback: search rfc.md by frontmatter id
          if [ -z "${SRC:-}" ] || [ ! -d "$SRC" ]; then
            if command -v yq >/dev/null 2>&1; then
              :
            else
              sudo wget -q https://github.com/mikefarah/yq/releases/download/v4.44.3/yq_linux_amd64 -O /usr/local/bin/yq
              sudo chmod +x /usr/local/bin/yq
            fi
            while IFS= read -r -d '' f; do
              if [ "$(yq eval --front-matter=extract '.id // ""' "$f")" = "$ID" ]; then
                SRC="$(dirname "$f")"
                break
              fi
            done < <(find rfcs -type f -name rfc.md -print0 2>/dev/null || true)
          fi

          if [ -z "${SRC:-}" ] || [ ! -d "$SRC" ]; then
            echo "❌ Could not locate RFC folder for ID ${ID}"
            echo "rfcs/ tree:"
            ls -la rfcs || true
            exit 1
          fi

          ACC="specs/$(basename "$SRC")"
          REJ="rejected/$(basename "$SRC")"

          echo "slug=$(basename "$SRC")" >> $GITHUB_OUTPUT
          echo "src=$SRC" >> $GITHUB_OUTPUT
          echo "acc=$ACC" >> $GITHUB_OUTPUT
          echo "rej=$REJ" >> $GITHUB_OUTPUT

      - name: Accept — move to specs and update status
        if: github.event.pull_request.merged == true
        shell: bash
        run: |
          set -euo pipefail
          git mv "${{ steps.rfc.outputs.src }}" "${{ steps.rfc.outputs.acc }}"
          FILE="${{ steps.rfc.outputs.acc }}/rfc.md"
          # status
          if grep -q '^status:' "$FILE"; then
            sed -i 's/^status:.*/status: Accepted/' "$FILE"
          else
            awk 'NR==1{print "status: Accepted"}1' "$FILE" > "$FILE.tmp" && mv "$FILE.tmp" "$FILE"
          fi
          # last_modified
          if grep -q '^last_modified:' "$FILE"; then
            sed -i "s/^last_modified:.*/last_modified: $(date +%F)/" "$FILE"
          else
            sed -i "1a last_modified: $(date +%F)" "$FILE"
          fi
          git add -A
          git commit -m "Finalize RFC ${{ steps.rfc.outputs.slug }} → Accepted" || true
          # Rebase to avoid 'cannot lock ref' when main moved
          git pull --rebase origin ${{ github.event.pull_request.base.ref }}
          git push origin HEAD:${{ github.event.pull_request.base.ref }}

      - name: Reject — move to rejected and update status
        if: github.event.pull_request.merged != true
        shell: bash
        run: |
          set -euo pipefail
          git mv "${{ steps.rfc.outputs.src }}" "${{ steps.rfc.outputs.rej }}"
          FILE="${{ steps.rfc.outputs.rej }}/rfc.md"
          if grep -q '^status:' "$FILE"; then
            sed -i 's/^status:.*/status: Rejected/' "$FILE"
          else
            awk 'NR==1{print "status: Rejected"}1' "$FILE" > "$FILE.tmp" && mv "$FILE.tmp" "$FILE"
          fi
          if grep -q '^last_modified:' "$FILE"; then
            sed -i "s/^last_modified:.*/last_modified: $(date +%F)/" "$FILE"
          else
            sed -i "1a last_modified: $(date +%F)" "$FILE"
          fi
          git add -A
          git commit -m "Finalize RFC ${{ steps.rfc.outputs.slug }} → Rejected" || true
          git pull --rebase origin ${{ github.event.pull_request.base.ref }}
          git push origin HEAD:${{ github.event.pull_request.base.ref }}

      - name: Close tracking issue if merged
        if: github.event.pull_request.merged == true
        uses: actions/github-script@v7
        with:
          script: |
            const owner = context.repo.owner;
            const repo = context.repo.repo;
            const slug = "${{ steps.rfc.outputs.slug }}";
            const baseRef = context.payload.pull_request.base.ref;
            const path = `specs/${slug}/rfc.md`;
            try {
              const { data } = await github.rest.repos.getContent({ owner, repo, path, ref: baseRef });
              const text = Buffer.from(data.content, 'base64').toString('utf8');
              const m = text.match(/^tracking_issue:\s*#?(\d+)/m);
              if (m) {
                const issue_number = parseInt(m[1], 10);
                await github.rest.issues.createComment({ owner, repo, issue_number, body: "✅ RFC merged and moved to `/specs`." });
                await github.rest.issues.update({ owner, repo, issue_number, state: 'closed' });
              }
            } catch (e) {
              core.warning(`Could not close tracking issue automatically: ${e.message}`);
            }

      - name: Delete RFC branch
        run: |
          git push origin --delete ${{ github.event.pull_request.head.ref }} || true
