name: RFC Finalize

on:
  pull_request:
    types: [closed]

permissions:
  contents: write
  pull-requests: write
  issues: write

jobs:
  finalize:
    if: startsWith(github.event.pull_request.head.ref, 'rfc/')
    runs-on: ubuntu-latest
    steps:
      - name: Checkout base branch
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: ${{ github.event.pull_request.base.ref }}

      - name: Set up Git
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

      - name: Derive RFC paths
        id: rfc
        shell: bash
        run: |
          HEAD_REF="${{ github.event.pull_request.head.ref }}"   # e.g. rfc/0002-sqlite-support-summary
          SLUG="${HEAD_REF#rfc/}"                                 # 0002-sqlite-support-summary
          SRC_DIR="rfcs/${SLUG}"
          ACC_DIR="specs/${SLUG}"
          REJ_DIR="rejected/${SLUG}"

          echo "slug=$SLUG" >> $GITHUB_OUTPUT
          echo "src=$SRC_DIR" >> $GITHUB_OUTPUT
          echo "acc=$ACC_DIR" >> $GITHUB_OUTPUT
          echo "rej=$REJ_DIR" >> $GITHUB_OUTPUT

          echo "Base branch is: ${{ github.event.pull_request.base.ref }}"
          git status --porcelain

      - name: Guard – ensure source folder exists
        shell: bash
        run: |
          if [ ! -d "${{ steps.rfc.outputs.src }}" ]; then
            echo "❌ Source folder not found: ${{ steps.rfc.outputs.src }}"
            echo "Repo tree:"
            ls -la
            echo "rfcs/"
            ls -la rfcs || true
            exit 1
          fi

      - name: Accept – move to specs and update status
        if: github.event.pull_request.merged == true
        shell: bash
        run: |
          git mv "${{ steps.rfc.outputs.src }}" "${{ steps.rfc.outputs.acc }}"
          FILE="${{ steps.rfc.outputs.acc }}/rfc.md"
          if grep -q '^status:' "$FILE"; then
            sed -i 's/^status:.*/status: Accepted/' "$FILE"
          else
            echo "status: Accepted" | cat - "$FILE" > "$FILE.tmp" && mv "$FILE.tmp" "$FILE"
          fi
          # Update last_modified if present
          if grep -q '^last_modified:' "$FILE"; then
            sed -i "s/^last_modified:.*/last_modified: $(date +%F)/" "$FILE"
          fi
          git add -A
          git commit -m "Finalize RFC ${{ steps.rfc.outputs.slug }} → Accepted"
          git push origin HEAD

      - name: Reject – move to rejected and update status
        if: github.event.pull_request.merged != true
        shell: bash
        run: |
          git mv "${{ steps.rfc.outputs.src }}" "${{ steps.rfc.outputs.rej }}"
          FILE="${{ steps.rfc.outputs.rej }}/rfc.md"
          if grep -q '^status:' "$FILE"; then
            sed -i 's/^status:.*/status: Rejected/' "$FILE"
          else
            echo "status: Rejected" | cat - "$FILE" > "$FILE.tmp" && mv "$FILE.tmp" "$FILE"
          fi
          if grep -q '^last_modified:' "$FILE"; then
            sed -i "s/^last_modified:.*/last_modified: $(date +%F)/" "$FILE"
          fi
          git add -A
          git commit -m "Finalize RFC ${{ steps.rfc.outputs.slug }} → Rejected"
          git push origin HEAD

      - name: Close tracking issue if merged
        if: github.event.pull_request.merged == true
        uses: actions/github-script@v7
        with:
          script: |
            const owner = context.repo.owner;
            const repo = context.repo.repo;
            const pr = context.payload.pull_request;

            // Try to read tracking_issue from rfc.md frontmatter
            const slug = pr.head.ref.replace(/^rfc\//,'');
            const path = `specs/${slug}/rfc.md`;
            try {
              const { data } = await github.rest.repos.getContent({ owner, repo, path, ref: pr.base.ref });
              const text = Buffer.from(data.content, 'base64').toString('utf8');
              const m = text.match(/^tracking_issue:\s*#?(\d+)/m);
              if (m) {
                const issue_number = parseInt(m[1], 10);
                await github.rest.issues.createComment({ owner, repo, issue_number, body: "✅ RFC merged and moved to `/specs`." });
                await github.rest.issues.update({ owner, repo, issue_number, state: 'closed' });
              }
            } catch (e) {
              core.warning(`Could not close tracking issue automatically: ${e.message}`);
            }

      - name: Delete RFC branch
        run: |
          git push origin --delete ${{ github.event.pull_request.head.ref }} || true
