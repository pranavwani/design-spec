name: RFC PR Checks

on:
  pull_request:
    types: [opened, reopened, synchronize, review_requested, review_submitted, closed]

jobs:
  rfc-checks:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Find RFC file
        id: rfc
        run: |
          RFC_FILE=$(git diff --name-only origin/main | grep -m1 'docs/rfcs/.*/RFC-.*\.md' || true)
          if [ -z "$RFC_FILE" ]; then
            echo "No RFC file found in PR."
            exit 0
          fi
          echo "file=$RFC_FILE" >> $GITHUB_OUTPUT

      - name: Parse squads from metadata
        id: squads
        run: |
          FILE=${{ steps.rfc.outputs.file }}
          SQUADS=$(grep -m1 "Squads" "$FILE" | cut -d':' -f2- | tr ',' '\n' | xargs)
          echo "squads=$SQUADS" >> $GITHUB_OUTPUT

      - name: Load reviewers config
        id: reviewers
        run: |
          SQUADS="${{ steps.squads.outputs.squads }}"
          > reviewers.txt
          for squad in $SQUADS; do
            REVIEWERS=$(yq ".${squad,,}.reviewers[]" .github/squad-reviewers.yml | xargs || true)
            if [ -n "$REVIEWERS" ]; then
              echo "$squad:$REVIEWERS" >> reviewers.txt
            fi
          done
          cat reviewers.txt || true

      - name: Fetch PR approvals
        id: approvals
        run: |
          APPROVERS=$(gh api repos/${{ github.repository }}/pulls/${{ github.event.pull_request.number }}/reviews \
            --jq '.[] | select(.state=="APPROVED") | .user.login' | sort -u)
          echo "approvers=$APPROVERS" >> $GITHUB_OUTPUT
          echo "Approvers: $APPROVERS"

      - name: Validate squad approvals & update checklist
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          APPROVERS="${{ steps.approvals.outputs.approvers }}"
          PR_NUM=${{ github.event.pull_request.number }}

          BODY=$(gh api repos/${{ github.repository }}/pulls/$PR_NUM --jq '.body')

          MISSING=""
          UPDATED="$BODY"

          while IFS=: read -r squad reviewers; do
            HIT="no"
            for r in $reviewers; do
              if echo "$APPROVERS" | grep -qw "$r"; then
                HIT="yes"
                break
              fi
            done

            if [ "$HIT" = "yes" ]; then
              # Tick checklist item for squad
              UPDATED=$(echo "$UPDATED" | sed "s/- \[ \] ${squad^} review/- [x] ${squad^} review/")
            else
              MISSING="$MISSING $squad"
              UPDATED=$(echo "$UPDATED" | sed "s/- \[x\] ${squad^} review/- [ ] ${squad^} review/")
            fi
          done < reviewers.txt

          # Update PR body if changed
          if [ "$UPDATED" != "$BODY" ]; then
            gh api repos/${{ github.repository }}/pulls/$PR_NUM \
              -X PATCH -f body="$UPDATED"
          fi

          if [ -n "$MISSING" ]; then
            echo "❌ Missing approvals from squads:$MISSING"
            exit 1
          else
            echo "✅ All required squads approved!"
          fi

      - name: Close original issue on merge
        if: github.event.action == 'closed' && github.event.pull_request.merged == true
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Extract original issue number from PR body
          ISSUE_NUM=$(echo "${{ github.event.pull_request.body }}" | grep -oE 'issue #[0-9]+' | cut -d'#' -f2 | head -n1)

          if [ -n "$ISSUE_NUM" ]; then
            gh issue close $ISSUE_NUM --comment "✅ RFC PR #${{ github.event.pull_request.number }} merged. RFC is now in status **Approved**."
          else
            echo "⚠️ No linked issue found in PR body"
          fi
