name: RFC Sync PR Body

on:
  pull_request:
    types: [opened, synchronize, ready_for_review, reopened]

permissions:
  pull-requests: write
  contents: read

jobs:
  sync:
    if: startsWith(github.event.pull_request.head.ref, 'rfc/')
    runs-on: ubuntu-latest
    steps:
      - name: Update PR body from rfc.md front-matter
        uses: actions/github-script@v7
        with:
          script: |
            const owner = context.repo.owner;
            const repo = context.repo.repo;
            const pr = context.payload.pull_request;

            // Find RFC folder
            const files = await github.paginate(
              github.rest.pulls.listFiles, { owner, repo, pull_number: pr.number }
            );
            const sample = files
              .map(f => f.filename)
              .find(p => /^rfcs\/\d{4}-[^/]+\//.test(p));
            if (!sample) return;

            const folderRoot = sample.match(/^(rfcs\/\d{4}-[^/]+)\//)[1];
            const rfcPath = `${folderRoot}/rfc.md`;

            // Load rfc.md
            let text;
            try {
              const { data } = await github.rest.repos.getContent({
                owner, repo, path: rfcPath, ref: pr.head.sha
              });
              text = Buffer.from(data.content, 'base64').toString('utf8');
            } catch {
              return;
            }

            // Parse a few fields from front matter
            const fm = (() => {
              const m = text.match(/^---\n([\s\S]*?)\n---/);
              if (!m) return {};
              const raw = m[1];
              const read = (key) => {
                const r = new RegExp(`^${key}:\\s*["']?([^\\n"']+)["']?\\s*$`, 'mi');
                const mm = raw.match(r); return mm ? mm[1].trim() : '';
              };
              const block = (key) => {
                const r = new RegExp(`${key}:\\s*\\|\\s*\\n([\\s\\S]*?)(\\n\\w+:|$)`, 'm');
                const mm = raw.match(r); return mm ? mm[1].trim() : '';
              };
              return {
                rfc_id: read('rfc_id'),
                title: read('title'),
                doc_set: read('doc_set'),
                summary: block('summary'),
                motivation: block('motivation')
              };
            })();

            const body = [
              `**RFC ${fm.rfc_id || ''}: ${fm.title || pr.title}**`,
              ``,
              `**Doc Set:** ${fm.doc_set || 'standard'}`,
              ``,
              `**Primary Doc:** [rfc.md](/${owner}/${repo}/blob/${pr.head.ref}/${rfcPath})`,
              ``,
              `### Summary`,
              fm.summary || "_(add summary in rfc.md)_",
              ``,
              `### Motivation`,
              fm.motivation || "_(add motivation in rfc.md)_"
            ].join('\n');

            await github.rest.pulls.update({ owner, repo, pull_number: pr.number, body });
