name: RFC Validate Docs

on:
  pull_request:
    types: [opened, synchronize, ready_for_review, reopened]

permissions:
  pull-requests: write
  contents: read

jobs:
  validate:
    if: startsWith(github.event.pull_request.head.ref, 'rfc/')
    runs-on: ubuntu-latest
    steps:
      - name: Validate RFC folder and files
        uses: actions/github-script@v7
        with:
          script: |
            const owner = context.repo.owner;
            const repo = context.repo.repo;
            const pr = context.payload.pull_request;

            // Get files in PR
            const files = await github.paginate(
              github.rest.pulls.listFiles, { owner, repo, pull_number: pr.number }
            );

            // Identify RFC folder path (rfcs/NNNN-slug/)
            const rfcFolder = files
              .map(f => f.filename)
              .find(p => /^rfcs\/\d{4}-[^/]+\//.test(p));
            if (!rfcFolder) {
              core.setFailed("No RFC folder (rfcs/NNNN-slug/) found in this PR.");
              return;
            }
            const folderRoot = rfcFolder.match(/^(rfcs\/\d{4}-[^/]+)\//)[1];

            // Read manifest from HEAD
            const headSha = pr.head.sha;
            const { data: manifestRaw } = await github.rest.repos.getContent({
              owner, repo, path: '.github/rfc-templates/manifest.json', ref: headSha
            });
            const manifest = JSON.parse(Buffer.from(manifestRaw.content, 'base64').toString('utf8'));

            // Fetch rfc.md to extract doc_set
            const rfcPath = `${folderRoot}/rfc.md`;
            let docSet = 'standard';
            try {
              const { data: rfcRaw } = await github.rest.repos.getContent({
                owner, repo, path: rfcPath, ref: headSha
              });
              const txt = Buffer.from(rfcRaw.content,'base64').toString('utf8');
              const m = txt.match(/doc_set:\s*"?([a-z]+)"?/i);
              if (m) docSet = m[1].toLowerCase();
            } catch (e) { /* ignore */ }

            const required = (manifest.requiredBySet[docSet] || manifest.requiredBySet['standard']);
            const allowed = new Set(manifest.allowed);

            // Gather actual files under the RFC folder (HEAD tree)
            const allChanged = files.map(f => f.filename).filter(p => p.startsWith(folderRoot + '/'));
            const names = allChanged
              .filter(p => !p.endsWith('/'))
              .map(p => p.replace(folderRoot + '/', ''));

            // Check allowed
            const bad = names.filter(n => !allowed.has(n));
            if (bad.length) {
              core.setFailed(`Disallowed files under ${folderRoot}: ${bad.join(', ')}`);
              return;
            }

            // Check required
            const missing = required.filter(req => !names.includes(req));
            if (missing.length) {
              core.setFailed(`Missing required files for set '${docSet}': ${missing.join(', ')}`);
              return;
            }

            core.info("RFC doc validation passed.");
