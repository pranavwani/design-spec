name: RFC Bootstrap

on:
  issues:
    types: [opened]

permissions:
  contents: write
  pull-requests: write
  issues: write

jobs:
  scaffold:
    if: contains(github.event.issue.labels.*.name, 'rfc')
    runs-on: ubuntu-latest
    steps:
      - name: Bootstrap RFC (create branch, files, draft PR)
        uses: actions/github-script@v7
        with:
          script: |
            const owner = context.repo.owner;
            const repo = context.repo.repo;
            const issue = context.payload.issue;
            const defaultBranch = context.payload.repository.default_branch || 'main';

            // Helpers
            const slugify = (s) => s.toLowerCase()
              .replace(/^\[rfc\]\s*:\s*/i, '')
              .replace(/[^a-z0-9]+/g, '-')
              .replace(/^-+|-+$/g, '')
              .slice(0, 60);

            // Extract fields from Issue Form body
            const body = issue.body || '';
            const grab = (label) => {
              const re = new RegExp(`\\b${label}\\b\\s*\\n+([\\s\\S]*?)(?=\\n\\w|$)`, 'i');
              const m = body.match(re);
              return m ? m[1].trim() : '';
            };

            const shortTitle = grab('Short Title') || issue.title.replace(/^\[RFC\]:\s*/i, '');
            const summary = grab('Summary');
            const motivation = grab('Motivation');
            let docSet = grab('Doc Set').toLowerCase();
            if (!['minimal','standard','full'].includes(docSet)) docSet = 'standard';

            // Compute next RFC id by scanning /rfcs
            let maxId = 0;
            try {
              const { data } = await github.rest.repos.getContent({
                owner, repo, path: 'rfcs', ref: defaultBranch
              });
              for (const item of (Array.isArray(data) ? data : [])) {
                const m = item.name.match(/^(\d{4})-/);
                if (m) maxId = Math.max(maxId, parseInt(m[1],10));
              }
            } catch (e) {
              if (e.status !== 404) throw e; // no rfcs dir yet is OK
            }
            const nextId = String(maxId + 1).padStart(4,'0');
            const slug = slugify(shortTitle);
            const rfcDir = `rfcs/${nextId}-${slug}`;
            const branch = `rfc/${nextId}-${slug}`;

            // Create branch from default
            const { data: baseRef } = await github.rest.git.getRef({ owner, repo, ref: `heads/${defaultBranch}` });
            await github.rest.git.createRef({
              owner, repo, ref: `refs/heads/${branch}`, sha: baseRef.object.sha
            });

            // Load manifest and decide which files to create
            const { data: manifestRaw } = await github.rest.repos.getContent({
              owner, repo, path: '.github/rfc-templates/manifest.json', ref: defaultBranch
            });
            const manifest = JSON.parse(Buffer.from(manifestRaw.content, 'base64').toString('utf8'));
            const sets = {
              minimal: ["rfc.md","hld.md","lld.md"],
              standard: ["rfc.md","hld.md","lld.md","api.md","db.md","infra.md","security.md"],
              full: ["rfc.md","hld.md","lld.md","api.md","db.md","infra.md","security.md","integration.md","perf.md","test.md"]
            };
            const filesToCreate = sets[docSet];

            // Helper: load template
            const loadTemplate = async (name) => {
              const { data } = await github.rest.repos.getContent({
                owner, repo, path: `.github/rfc-templates/${name}`, ref: defaultBranch
              });
              return Buffer.from(data.content, 'base64').toString('utf8');
            };

            const today = new Date().toISOString().slice(0,10);
            const authorLogin = issue.user && issue.user.login ? issue.user.login : "unknown";

            // Create each file from template with tokens replaced
            for (const f of filesToCreate) {
              let content = await loadTemplate(f);
              content = content
                .replace(/{{RFC_ID}}/g, nextId)
                .replace(/{{TITLE}}/g, shortTitle)
                .replace(/{{AUTHOR}}/g, authorLogin)
                .replace(/{{DATE}}/g, today)
                .replace(/{{DOC_SET}}/g, docSet)
                .replace(/{{SUMMARY}}/g, summary || "(fill me)")
                .replace(/{{MOTIVATION}}/g, motivation || "(fill me)");

              await github.rest.repos.createOrUpdateFileContents({
                owner, repo,
                path: `${rfcDir}/${f}`,
                message: `RFC ${nextId}: scaffold ${f}`,
                content: Buffer.from(content,'utf8').toString('base64'),
                branch
              });
            }

            // Create a Draft PR
            const prTitle = `RFC ${nextId}: ${shortTitle}`;
            const prBody = [
              `Closes #${issue.number}`,
              ``,
              `**Doc Set:** ${docSet}`,
              ``,
              `**Primary Doc:** [rfc.md](/${owner}/${repo}/blob/${branch}/${rfcDir}/rfc.md)`,
              ``,
              `**Summary (from form):**`,
              ``,
              summary || "(provide summary in rfc.md)"
            ].join('\n');

            const { data: pr } = await github.rest.pulls.create({
              owner, repo,
              title: prTitle,
              head: branch,
              base: defaultBranch,
              body: prBody,
              draft: true
            });

            // Comment back with quick edit links
            const editUrl = `https://github.com/${owner}/${repo}/edit/${branch}/${rfcDir}/rfc.md`;
            await github.rest.issues.createComment({
              owner, repo, issue_number: issue.number,
              body: [
                `âœ… RFC scaffolded: **${prTitle}**`,
                `- Branch: \`${branch}\``,
                `- PR (Draft): #${pr.number}`,
                `- Start editing now: ${editUrl}`
              ].join('\n')
            });
